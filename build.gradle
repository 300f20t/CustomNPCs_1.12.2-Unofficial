// DEV resources path
buildscript {
    repositories {
        //mavenLocal() // -> used only for installation mixingradle 0.7-SNAPSHOT
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
        maven { url = "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.38'
    }
}

// Plugins for creating JAR
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'idea'

// JAR naming
version = getVersion()
group = mod_group
archivesBaseName = mod_name

// Snapshot version
def getVersion() {
    String month
    switch (Calendar.getInstance().get(Calendar.MONTH)) {
        case Calendar.FEBRUARY: month = "Feb"; break
        case Calendar.MARCH: month = "Mar"; break
        case Calendar.APRIL: month = "Apr"; break
        case Calendar.MAY: month = "May"; break
        case Calendar.JUNE: month = "Jun"; break
        case Calendar.JULY: month = "Jul"; break
        case Calendar.AUGUST: month = "Aug"; break
        case Calendar.SEPTEMBER: month = "Sep"; break
        case Calendar.OCTOBER: month = "Oct"; break
        case Calendar.NOVEMBER: month = "Nov"; break
        case Calendar.DECEMBER: month = "Dec"; break
        default: month = "Jan"
    }
    Calendar calendar = Calendar.getInstance()
    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH)
    int year = calendar.get(Calendar.YEAR)
    return "v." + mod_version + "-" + String.format("%02d", dayOfMonth) + month + year + '-Snapshot'
}

// Set Java compatibility to version
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

// launch in DEV environment
minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    accessTransformer = file('src/main/resources/META-INF/deobfuscation.cfg')
    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', mod_group + '.mixin.NpcMixinCore'
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            property "mixin.debug", 'true'
            args '--username=' + mod_author.replace('[', '').replace(']', ''), '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', mod_mixin_configs
        }
        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', mod_group + '.mixin.NpcMixinCore'
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            property "mixin.debug", 'true'
            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', mod_mixin_configs//, 'nogui'
        }
    }
}

// Add Maven repositories
repositories {
    mavenCentral()
    maven { url 'https://maven.cleanroommc.com' }
    //maven { url = 'https://repo.spongepowered.org/maven' }
}

// Project dependencies (required libraries)
dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"

    // Mixin Lib
    implementation('org.spongepowered:mixin:0.8.4') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }

    // Encrypt Lib
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.67'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
}

// Resource processing (mcmod.info file)
processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', minecraft_version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand  'modid': mod_id,
                'name': mod_name,
                'version': mod_version,
                'mcversion': minecraft_version,
                'description': mod_description,
                'credits': mod_credits,
                'logoFile' : mod_logoFile,
                'authorList': mod_author
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// sets of project source files
sourceSets {
    main {
        ext.refMap = mod_mixin_refmap
    }
}

// JAR file manifest settings
mixin {
    config mod_mixin_configs
}

// Creating a JAR file
jar {
    // Manifest settings
    manifest {
        attributes([
            "Implementation-Title"       : mod_name,
            "Implementation-Version"     : mod_version,
            "Implementation-Vendor"      : mod_author.replace('[', '').replace(']', ''),
            "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLCorePluginContainsFMLMod": "true",
            "FMLCorePlugin"              : mod_group + ".mixin.NpcMixinCore",
            "FMLAT"                      : "deobfuscation.cfg",
            "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
            "MixinConfigs"               : mod_mixin_configs,
            "ForceLoadAsMod"             : "true"
        ])
    }
    // Reobfuscate field and method names
    finalizedBy('reobfJar')
}

// The content below is needed for IntelliJ IDEA to be able to see the mod's resources
idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

subprojects {
    apply plugin: 'idea'
}

tasks.register('prepareAssets', Copy) {
    group = 'build'
    from project.file('src/main/resources')
    into project.file('build/classes/java/main')
}

classes.dependsOn(prepareAssets)