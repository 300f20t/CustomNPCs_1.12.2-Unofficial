buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2" }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
        maven { url = "https://maven.minecraftforge.net/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.38', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = getVersion()
group = 'noppes.npcs'
archivesBaseName = "CustomNPCs-1.12.2-Unofficial"

def getVersion() {
    String month
    switch (Calendar.getInstance().get(Calendar.MONTH)) {
        case Calendar.FEBRUARY: month = "Feb"; break
        case Calendar.MARCH: month = "Mar"; break
        case Calendar.APRIL: month = "Apr"; break
        case Calendar.MAY: month = "May"; break
        case Calendar.JUNE: month = "Jun"; break
        case Calendar.JULY: month = "Jul"; break
        case Calendar.AUGUST: month = "Aug"; break
        case Calendar.SEPTEMBER: month = "Sep"; break
        case Calendar.OCTOBER: month = "Oct"; break
        case Calendar.NOVEMBER: month = "Nov"; break
        case Calendar.DECEMBER: month = "Dec"; break
        default: month = "Jan"
    }
    Calendar calendar = Calendar.getInstance()
    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH)
    int year = calendar.get(Calendar.YEAR)
    return "v.${mod_version}-" + String.format("%02d", dayOfMonth) + month + year + '-Snapshot'
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    accessTransformer = file('src/main/resources/META-INF/deobfuscation.cfg')
    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'noppes.npcs.mixin.NpcsLaunchPlugin,zone.rong.mixinbooter.MixinBooterPlugin'
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            property "mixin.debug", 'true'
            arg '--username=BetaZavr'
        }
        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'noppes.npcs.mixin.NpcsLaunchPlugin,zone.rong.mixinbooter.MixinBooterPlugin'
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            property "mixin.debug", 'true'
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.cleanroommc.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"

    // Mixins
    compile fg.deobf('zone.rong:mixinbooter:9.3')
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    // Encrypt
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.67'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
}

sourceSets {
    main {
        ext.refMap = "mixins.npcs.refmap.json"
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"        : "CustomNPCs",
                "Specification-Vendor"       : "BetaZavr",
                "Specification-Version"      : "1",
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : "${version}",
                "Implementation-Vendor"      : "BetaZavr",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin"              : "noppes.npcs.mixin.NpcsLaunchPlugin",
                "FMLCorePluginContainsFMLMod": "true",
                "FMLAT"                      : "deobfuscation.cfg",
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"               : "mixins.npcs.json",
                "ForceLoadAsMod"             : "true"
        ])
    }
}

jar.finalizedBy('reobfJar')

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}
subprojects {
    apply plugin: 'idea'
}

tasks.register('prepareAssets', Copy) {
    group = 'build'
    from project.file('src/main/resources')
    into project.file('build/classes/java/main')
}

classes.dependsOn(prepareAssets)