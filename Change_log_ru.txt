Эта сборка мода была модифицирована BetaZavr.
Надежность сборки не гарантируется! Сделайте резервную копию ваших карт!

------------------------------------------------------------------------------------------------------------------------------------------------------
Исправлено или добавлено Для Простых Пользователей:

* Теперь можно создавать собственные блоки и предметы через мод.
  После первого запуска ищите файлы "custom_blocks.js" и "custom_items.js" (внутри уже будут примеры создания)
  в папке "customnpcs", которая сформируется в корне вашего сервера/клиента
  Необходимые файлы (json настройки и текстуры) могут быть созданы автоматически (тег "CreateAllFiles": 1b)
  Изменения вступают в силу только после перезапуска сервера/клиента

* Все дополнения и правки имеют описание в Окнах/ГУИ настройки.
  Достаточно навести курсор мышки на новое поле.

* Исправлена возможность добавления глобальных Крафтов и Крафтов Мода на версию 1.12.2
  Собрано через жуткие костыли, поэтому может несколько тормозить вашу систему!

* Переделана система Доступности. Она же "Условия активности".
  Теперь доступно до 10 настроек на Диалог, Квест, Фракцию и Объектного Табло
  Условия днём/ночью расширены, можно указать конкретные часы.

* Добавлен уровень и Редкость NPC. Обозначается под Именем и создаётся автоматически
  При назначении уровня или редкости у NPC будет почти полностью пересчитаны Характеристики!
  Здоровье, Размеры, Сопротивление Урону, Урон от NPC, Опыт от убийства, Вид Уровня и Редкости в Имени - меняется автоматически.
  Расширенные настройки для PRO можно посмотреть в файле "...\config\CustomNpcs.cfg" 
  Вкладка "Характеристики"

* Изменена система дропа предметов после убийства NPC.
  Можно настроить до 32 предметов с максимально гибкой настройкой каждого предмета.
  Настраивается: Поломка, Чары, Атрибуты, Теги, Количество и Шансы для всего.
  Вкладка "Инвентарь"

* Полностью переделана система Квестов. (Работает и квестами основного мода)
  Переделан Журнал Квестов (убрано лишнее, добавлено новое)
  Создание Квеста упрощено подсказками и описаниями
  Задачи теперь не определяют тип Квеста и можно настроить до 9 различных задач.
  Так же можно назначить способ выполнения задач: в любом порядке, поочерёдно, выполнить хотя бы одну из всех
  Можно выбрать один из предметов Награды, Все или один случайный
  Задачи: Найти предмет, Прочитать диалог с NPC, Убить кого-либо (в том числе и совместно), Найти локацию, Настраиваемая(для кодеров) и новая Крафт Предметов;
  Квесты теперь можно отменять через журнал Квестов (Для PRO и если настроено);
  Можно настроить дополнительный текст Награды, видный в журнале Квестов
  Квесты теперь имеют Уровень (не влияет ни на что, просто показывает сложность квеста)
  Если квест был отредактирован, эти изменения сразу же отразятся в активных Квестах игроков без перезапуска
  При выполнении прогресса задания в Квесте игрок увидит это на экране и в чате
  
* Полностью переделана система Торговцев. (Работает и с магазинами основного мода)
  Магазины теперь отдельны от NPC. И разные NPC могут использовать один магазин
  Товары теперь можно не только покупать, но и продавать (если доступно)
  Бартер до 9 предметов (раньше было 2)
  Можно указать виртуальную валюту. Управление валютой для создателей скриптов (см. IPlayer)
  Каждый товар настраивается отдельно от других (Игнор NBT и Мета + добавлены Условия Доступности)
  Товар может быть лимитирован. Обновление товара при этом для всего магазина указывается отдельно
  Символ/Значок Валюты можно изменить в конфигурации мода. Переменная "charCurrencies"

* Удобное управление созданием новых категорий Диалогов и Квестов.
  Минимум кликов.
  При удалении Категории, удаляются и все её внутренности (диалоги и квесты)!

* Озвучивание диалогов больше не накладывается друг на друга.
  При показе нового диалога, отключается озвучка прошлого диалога автоматически

* Прочие мелкие правки упрощающие вам жизнь.
  - Добавлена виртуальная валюта
  - В русском переводе в настройках Куклы имена правой и левой ноги были перепутаны
  - Вкладки в Банках выглядят нормально
  - NPC теперь атакует игрока со здоровьем меньше 1 (половина сердца)
  - Знаков над головой NPC можно добавить любое количество
  - Можно подключить библиотеку CommonJS для ваших ERMAScripts как дополнение к nashorn (при этом используется раздел "(you world)/customnpcs/scripts/common_js/")
  - Загрузчики Чанков теперь грузят 3х3 чанка вокруг себя (раньше было 2х2 = свой чанк и чанки на юг и восток)
  - События Forge теперь доступны в одиночном режиме игры
  - Очки фракции при убийстве можно настроить на всю Фракцию. И на для всех фракций (раньше было на каждого NPC и только 2 фракции)
  - Мотыга теперь работает лучше и с любым типом существ
  - Отображение клона NPC при спавне его через клонер
  - книга тегов NBT работает и с предметами
  - и т.д.

------------------------------------------------------------------------------------------------------------------------------------------------------
Исправлено или добавлено Для Пишущих Скрипты:

* Добавлена система помощи написания скриптов.
  - при вводе вашего кода, появляется список с возможным продолжением кода.
  - учитывает обфускацию ванильного кода (включается в конфигурации мода, переменная useObfuscations)
  - она всё ещё глючит, так что не жалуйтесь.

* CustomGui:
  - Исправлено: Текстура заднего фона больше никогда не будет затемна или чёрной! (раньше на старых JRE затемнялась)
  - Исправлено: Добавление слотов и инвентаря игрока в заданные координаты (раньше было смещено на [u:-40, v:-45] )
  - Исправлено: CustomGuiClose Event теперь работает (раньше не работал)
  - Дополнительно: Слоты теперь отображаются картинкой слота (раньше не отображалось, приходилось создавать элемент текстуры слота)
  - Дополнительно: CustomGuiSlotClicked Event содержит переменную IItemStack heldItem (раньше не было)
  
* Function questTurnIn (вызывается перед выдачей наград за квест)
  теперь содержит все виды наград за квест:
  - event.expReward - количество опыта;
  - event.itemRewards - (IItemStack[]) предметы;
  - event.factionOptions - (FactionOptions) очки фракциям;
  - event.mail - (PlayerMail) отправить письмо;
  - event.command - (String) выполнить команду;
  - event.nextQuestId - (int) выдать следующий квест по ID;

* Новая функция "keyDown", аналог функции "keyPressed", но работает при нажатии клавиши (keyPressed - при отжатии)
  
* Напрочь переделана константная функция "dump"
  - теперь она возвращает дату `IDataObject` содержащую все (да да все, даже приватные) методы, переменные, подклассы и конструкторы, в том числе и super класса.
    Раньше возвращала строку только из публичных(общедоступных) имен переменных и методов
  - теперь вы можете получить/назначить/вызвать даже приватные значения и методы (см. ниже IDataObject)
  
* Новая возможность добавить собственные константы, доступные из любого кода.
  - переменные, объекты и Функции
  Смотри файл ".\saves\world_name\customnpcs\scripts\constant_scripts.json"

* Новая константная функция "getField(object, key)"
  - возвращает значение переменной с именем `key` из объекта(экземпляра класса) `object`
  - "null" если такой переменной не существует
  - приватность переменной не имеет значение!
  - можно удалить/изменить
  
* Новая константная функция "setField(object, key, value)"
  - возвращает "true", если удалось изменить переменную с имемем `key` из объекта(экземпляра класса) `object` на значение `value`
  - "false" во всех других случаях
  - приватность переменной не имеет значение!
  - можно удалить/изменить
  
* Новая константная функция "invoke(object, key, value)"
  - если удалось вызвать метод с имемем `key` из объекта(экземпляра класса) `object` с переданными значениями `value` (value - как переменная или массив), то возвращает результат этого метода
  - "null" во всех других случаях
  - приватность метода не имеет значение!
  - можно удалить/изменить
  
* Новое событие для IPlayer: `questCanсeled`
  - вызывается, когда игрок пытается отменить квест.
  - событие можно отменить
  - содержит переменные `IPlayer player` и `IQuest quest`
  
* Новое событие для IPlayer: `itemFished`
  - вызывается, когда игрок поймал рыбу
  - событие можно отменить
  - содержит переменные `IPlayer player`, `IItemStack[] stacks` и `int rodDamage`
  
* Новое событие для IPlayer: `itemCrafted`
  - вызывается, когда игрок создал предмет
  - событие нельзя отменить
  - содержит переменные `IPlayer player`, `IItemStack crafting` и `IInventory craftMatrix`

API:																	Описание:
NpcAPI
	IEntityDamageSource getIDamageSource(String name, IEntity<?> entity)	(new)	Создаёт источкин урона от указанной сущности
	
IEntity
	void damage(float amount, IEntityDamageSource source);		(new)	Нанести урон сущности от лица другой сущности
	
ICustomGui
	void setBackgroundTexture(int width, int height, int textureX, int textureY, int stretched, String resourceLocation);
																(new)	установить текстуру задника
																		textureX и textureY - с каких пикселей отрисовывается текстура
																		width и height - размеры отрисовываемого куска
																		stretched = 0-растянуть/сжать под размеры GUI, 1-наклывать друг за другом, 2-сшивает первый к последнему куску

IEntityDamageSource
	String getType();											(new)	возвращает название урона (используется в локализации)
	void setType(String damageType);							(new)	установить название урона (используется в локализации)
	IEntity<?> getITrueSource();								(new)	возвращает реальную сущность, наносящую этот урон (как монстр, игрок и т.д.)
	void setTrueSource(IEntity<?> entity);						(new)	установить реальную сущность, наносящую этот урон (как монстр, игрок и т.д.)
	IEntity<?> getIImmediateSource();							(new)	возвращает косвенную сущность, наносящую этот урон (как стрела, снаряд и т.д.)
	void setImmediateSource(IEntity<?> entity);					(new)	установить косвенную сущность, наносящую этот урон (как стрела, снаряд и т.д.)
	String getDeadMessage();									(new)	возвращает текст сообщения всем игрокам при смерти от этого урона
	void setDeadMessage(String message);						(new)	установить текст сообщения всем игрокам при смерти от этого урона
	boolean getIsThornsDamage();								(new)	возвращает является ли текущий урон как урон от доспехов (Чары Шипы)
	IEntityDamageSource setIsThornsDamage();					(new)	установить является ли текущий урон как урон от доспехов (Чары Шипы)
	
IBlockScripted
	void setModel(String blockName, int meta);					(new)	установить модель блока через имя блока и метадату
	void setModel(IBlock iblock);								(new)	установить модель блока через блок из мира

INPCStats:
	int getLevel();												(new)	возвращает уровень NPC
	void setLevel(int level);									(new)	установить уровень NPC
	int getRarity();											(new)	возвращает редкость NPC
	void setRarity(int rarity);									(new)	установить редкость NPC
	String getRarityTitle();									(new)	возвращает cтроку Редкости и Уровня NPC
	void setRarityTitle(String rarity);							(new)	установить cтроку Редкости и Уровня NPC
	boolean isCalmdown();										(new)	возвращает необходимость возврата в домашнюю позицию
	void setCalmdown(boolean bo);								(new)	установить необходимость возврата в домашнюю позицию
	
IPlayer:
	int[] getKeyPressed();										(new)	возвращает массив ID нажатых в данный момент игроком клавиш клавиатуры
	boolean hasKeyPressed(int key);								(new)	нажата ли в данный момент конкретная клавиша клавиатуры
	int[] getMousePressed();									(new)	возвращает массив ID нажатых в данный момент игроком клавиш мыши
	boolean hasMousePress(int key);								(new)	нажата ли в данный момент конкретная клавиша мыши
	boolean isMoved();											(new)	движется ли сейчас игрок (именно через клавиатуру, а не течение воды толкает персонаж)
	double[] getWindowSize();									(new)	возвращает массив как длина и ширина экрана игрока в данный момент
	long getMoney();											(new)	возвращает текущее количество виртуальных денег у игрока
	void setMoney(long value);									(new)	установить количество виртуальных денег у игрока
	void addMoney(long value);									(new)	добавить виртуальных денег игроку
	
	int inventoryItemCount(IItemStack stack, boolean ignoreDamage, boolean ignoreNBT);	(new)
	- возвращает количество предметов в основном инвентаре игрока схожее с предметом "stack"
	- "ignoreDamage" - игнорировать урон/метадату
	- "ignoreNBT" - игнорировать NBT теги в предмете
	
INPCInventory:
	IItemStack getDropItem(int slot)							(old)	удалено (не используется)
	void setDropItem(int slot, IItemStack stack, int amount);	(old)	удалено (не используется)
	IItemStack[] getItemsRNG()									(old)	удалено (переделано)
	ICustomDrop addDropItem(IItemStack item, double chance);	(new)	добавит и вернёт новый дроп. или null если перебор (32 максимум)
    ICustomDrop[] getDrops();									(new)	возвращает массив из всего дропа
	ICustomDrop getDrop(int slot);								(new)	возвращает дроп из списка по позиции
	boolean removeDrop(int slot);								(new)	удалить дроп из списка по позиции
	boolean removeDrop(ICustomDrop drop);						(new)	удалить дроп из списка
	boolean getXPLootMode();									(new)	возвращает автоматическую выдачу опыта или выброс шаров опыта на землю
	void setXPLootMode(boolean mode);							(new)	установить автоматическую выдачу опыта
    IItemStack[] getItemsRNG(Entity attacking);					(new)	создаёт и возвращает список предметов, которые выпадут на землю
    IItemStack[] getItemsRNGL(Entity attacking);				(new)	создаёт и возвращает список предметов, которые останутся как лут
	
IQuest
	int getType();												(old)	удалено Теперь за это отвечает задача в Квесте (см. IQuestObjective)
    void setType(int p0);										(old)	удалено
	String getTitle();											(new)	возвращает строку названия квеста (уровень и имя)
	int getLevel();												(new)	возвращает уровень квеста
	void setLevel(int level);									(new)	установить уровень квеста
	void setRewardText(String text);							(new)	установить текст награды
	boolean isCancelable();										(new)	возвращает отменяемый или квест или нет
	void setCancelable(boolean cancelable);						(new)	установить отменяемый квест или нет
	IQuestObjective addTask();									(new)	добавить и возвратить новую задачу Квеста (не больше 9)
	boolean removeTask(IQuestObjective task);					(new)	удалить задачу из квеста и вернёт логику, было ли совершено удаление
	int[] getForgetDialogues();									(new)	возвращает массив IDs забываемых диалогов при отмене квеста
	void setForgetDialogues(int[] forget);						(new)	установить массив IDs забываемых диалогов при отмене квеста
	int[] getForgetQuests();									(new)	возвращает массив IDs, забываемых квестов при отмене квеста
	void setForgetQuests(int[] forget);							(new)	установить массив IDs забываемых квестов при отмене квеста
	boolean isSetUp()											(new)	возвращает, настроен ли квест или нет. Проверяются все задачи на доступность
	int getRewardType();										(new)	возвращает тип выдачи предметов награды
	void setRewardType(int type);								(new)	установить тип выдачи предметов награды
	void sendChangeToAll()										(new)	отправить изменения квеста всем игрокам онлайн
	
IQuestObjective
	int getType();												(new)	возвращает тип задачи 0-предмет; 1-диалог; 2-убить; 3-окация; 4-зона убийства; 5-настраиваемое; 6-крафт
	void setType(int type);										(new)	установить тип задачи
	int getTargetID();											(new)	возвращает ID задачи (например ID диалога)
	void setTargetID(int id);									(new)	установить ID задачи (от 0 и больше)
	void setMaxProgress(int value);								(new)	установить максимальный прогресс задачи
	String getTargetName();										(new)	возвращает имя цели задачи
	void setTargetName(String name);							(new)	установить имя цели задачи
	IItemStack getItem();										(new)	возвращает предмет задачи
	void setItem(IItemStack item);								(new)	установить предмет задачи
	boolean isItemLeave();										(new)	возвращает удаление предмета у игрока по завершению квеста
	void setItemLeave(boolean bo);								(new)	установить удаление предмета у игрока по завершению квеста
	boolean isIgnoreDamage();									(new)	возвращает игнорирование поломки предмета
	void setItemIgnoreDamage(boolean bo);						(new)	установить игнорирование поломки предмета
	boolean isItemIgnoreNBT();									(new)	возвращает игнорирование тегов предмета
	void setItemIgnoreNBT(boolean bo);							(new)	установить игнорирование тегов предмета
	int getAreaRange();											(new)	возвращает дистанцию для зоны убийств (убив NPC, игроки в дистанции от вас получают прогресс по убийству)
	void setAreaRange(int range);								(new)	установить дистанцию для зоны убийств min 3 max 24

IRecipeHandler:
	INpcRecipe addRecipe(String name, String group, boolean global, boolean known, boolean shaped, ItemStack result, Object... objects);							(old)	изменено под новые стандарты
    INpcRecipe addRecipe(String name, String group, boolean global, boolean known, boolean shaped, ItemStack result, int width, int height, ItemStack... stacks);	(old)	изменено под новые стандарты
	List<INpcRecipe> getGlobalRecipes(String group);			(old)	изменено, теперь возвращает глобальные рецепты из конкретной группы
    List<INpcRecipe> getCarpentryRecipes(String group);			(old)	изменено, теперь возвращает рецепты мода из конкретной группы
    List<ResourceLocation> getGlobalData();						(new)	возвращает список имён глобальных групп рецептов
    List<ResourceLocation> getCarpentryData();					(new)	возвращает список имён групп рецептов мода

IRecipe переименовано в INpcRecipe:
	ItemStack[][] getRecipe();									(old)	теперь возвращает массив из вариантов предметов по слотам
	String getGroup();											(new)	возвращает имя группы крафта предмета
	boolean isKnown();											(new)	возвращает, известен ли рецепт всем игрокам
	boolean isShaped();											(new)	возвращает, является ли рецепт фиксированным или бесформенным
	void setKnown(boolean known);								(new)	установить, известен ли рецепт всем игрокам
	IAvailability getAvailability();							(new)	возвращает доступность рецепта
	
IRoleTrader:
	IItemStack getProduct(int position);						(new)	(старое getSold) возвращает товар из всего списка товаров
	IItemStack getCurrency(int position, int slot);				(new)	(старое getCurrency) возвращает предмет цены из всего списка товаров
	void set(int position, IItemStack product, IItemStack[] currencys);	(new)	изменено, изменяет или создаёт новую позицию товара 	
	void remove(int position);									(old)	без изменений - удаляет товар по его позиции
	void setName(String name);									(new)	(старое setMarket) изменить имя магазина
	String getName();											(new)	(старое getMarket) возвращает имя магазина

IMark:
	boolean isRotate();											(new)	возвращает вращение значка
	void setRotate(boolean rotate);								(new)	установить вращение значка
	
IJobSpawner
	IEntityLivingBase<?> spawnEntity(int pos, boolean isDie);	(old)	изменено, теперь надо указывать из списка жизни или смерти призывать сущность.
	
IAvailability:
	int getHealth();											(new)	возвращает процент здоровья игрока(0-100)
	int getHealthType();										(new)	возвращает процент тип проверки здоровья игрока(0-всегда, 1-больше, 2-меньше)
	void setHealth(int value, int type);						(new)	установить процент здоровья игрока(0-100) и тип проверки(0-всегда, 1-больше, 2-меньше)
	
------------------------------------------------------------------------
Новые:
ICustomDrop:
	int getMinAmount();													возвращает минимальное количество предмета при создании дропа
	int getMaxAmount();													возвращает максимальное количество предмета при создании дропа
	void setAmount(int min, int max);									установить минимальное и максимальное количество предмета при создании дропа
	IItemStack getItem();												возвращает базовый предмет дропа
	void setItem(IItemStack item);										установить базовый предмет дропа
	void resetTo(IItemStack item);										установить базовый предмет и пересоздать дроп из него
	double getChance();													возвращает шанс дропа (что предмет дроп появится после смерти NPC)
	void setChance(double chance);										установить шанс дропа
	boolean getLootMode();												возвращает автоматическую выдачу предмета или выброс его на землю
	void setLootMode(boolean lootMode);									установить автоматическую выдачу предмета
	boolean getTiedToLevel();											возвращает зависит ли создание предмета от уровня NPC или Случайные параметры
	void setTiedToLevel(boolean lootMode);								установить зависит ли создание предмета от уровня NPC или Случайные параметры
	float getDamage();													возвращает максимум, на сколько процентов необходимо сломать предмет. Предмет ломается в случайном значении. (от 0 до 1)
	void setDamage(float dam);											установить максимум, на сколько процентов необходимо сломать предмет
	IEnchantSet addEnchant(String enchantName);							добавит и вернёт Настройку Чара при создании дропа по имени чара
	IEnchantSet addEnchant(int enchantId);								добавит и вернёт Настройку Чара при создании дропа по ID чара
	IEnchantSet[] getEnchantSets();										возвращает массив всех Настроек Чар
	void removeEnchant(IEnchantSet enchant);							удалит Настройку Чара 
	IAttributeSet addAttribute(String attributeName);					добавит и вернёт Настроку Атрибуты при создании дропа
	IAttributeSet[] getAttributeSets();									возвращает массив всех Настроек Атрибутов
	void removeAttribute(IAttributeSet attribute);						удалит Настроку Атрибуты
	IDropNbtSet addDropNbtSet(int type, double chance, String paht, String[] values);	добавит и вернёт Настройку Тега при создании дропа
	IDropNbtSet[] getDropNbtSets();										возвращает массив всех Настроек Тегов
	void removeDropNbt(IDropNbtSet nbt);								удалить Настройку Тега
	IItemStack createLoot();											возвращает вариант созданного предмета из Настроек Дропа
	void remove();														удалить этот Дроп
	int getQuestID();													возвращает ID квеста, при выполнении которого, активно создание дропа
	void setQuestID(int id);											установить ID квеста

IAttributeSet:
	double getMinValue();												возвращает минимальное значение Атрибуты
	double getMaxValue();												возвращает максимальное значение Атрибуты
	void setValues(double min, double max);								установить минимальное и максимальное значения Атрибуты
	String getAttribute();												возвращает базовый атрибут
	void setAttribute(String name);										установить базовый атрибут по имени
	void setAttribute(IAttribute attribute);							установить базовый атрибут
	int getSlot();														возвращает слот Атрибуты
	void setSlot(int slot);												установить слот Атрибуты
	double getChance();													возвращает шанс наложения Атрибуты при создании Дропа
	void setChance(double chance);										установить шанс наложения Атрибуты
	void remove();														удалить эту настройку Атрибуты из Дропа

IEnchantSet:
	int getMinLevel();													возвращает минимальный уровень Чара
	int getMaxLevel();													возвращает максимальный уровень Чара
	void setLevels(int min, int max);									установить минимальный и максимальный уровень Чара
	String getEnchant();												возвращает имя чара
	boolean setEnchant(int id);											установить Чар по ID
	boolean setEnchant(String name);									установить Чар по имени
	void setEnchant(Enchantment enchant);								установить Чар
	double getChance();													возвращает шанс наложения Чар при создании Дропа
	void setChance(double chance);										установить шанс наложения Чар
	void remove();														удалить эту настройку Чаров из Дропа

IDropNbtSet:
	String getPath();													возвращает путь до Тега
	void setPath(String paht);											установить путь до Тега
	String[] getValues();												возвращает массив вариантов значения Тега, выбирается случайный из них
	void setValues(String values);										установить вариант значения Тега
	void setValues(String[] values);									установить массив вариантов значения Тега
	int getType();														возвращает тип настроенного Тега
	void setType(int type);												установить тип настроенного Тега
	int getTypeList();													возвращает тип Листа настроенного Листового Тега
	void setTypeList(int type);											установить тип Листа настроенного Листового Тега
	NBTTagCompound getConstructoredTag(NBTTagCompound nbt);				создаёт и возвращает вариант настроенного Тега
	double getChance();													возвращает шанс применения Тега при создании Дропа
	void setChance(double chance);										установить шанс применения Тега
	void remove();														удалить эту настройку Тега из Дропа
	
IDataObject:
	String get();														возвращает строку похожую на старый `dump` метод, содержащую только имена переменных, методов и субклассов
	String getInfo();													возвращает длинную строку с полным содержанием о состоянии объекта (все данные о конструкторах, субклассах, переменных и методов)
	String getConstructorsInfo();										возвращает длинную строку с полным содержанием о состоянии объекта, только о конструкторах
	String getFieldsInfo();												возвращает длинную строку с полным содержанием о состоянии объекта, только о переменных
	String getMethodsInfo();											возвращает длинную строку с полным содержанием о состоянии объекта, только о методах
	String getClassesInfo();											возвращает длинную строку с полным содержанием о состоянии объекта, только о субклассах
	IDataElement[] getConstructors();									возвращает массив элементов из всех конструкторов объекта
	IDataElement[] getFields();											возвращает массив элементов из всех переменных объекта
	IDataElement[] getMethods();										возвращает массив элементов из всех методов объекта
	IDataElement[] getClasses();										возвращает массив элементов из всех субклассов объекта
	IDataElement getField(String name);									возвращает конкретный элемент переменной, если её нет, то null
	IDataElement getMethod(String name);								возвращает конкретный элемент метода, если его нет, то null
	IDataElement getClazz(String name);									возвращает конкретный элемент субкласс, если его нет, то null

IDataElement
	int getType()														возвращает тип элемента: -1 - Объект; 0-Конструктор; 1-Субкласс; 2-Переменная; 3-Метод;
	Object getObject()													возвращает объект этого элемента. Это может быть: java.lang.Class; java.lang.reflect.Field; java.lang.reflect.Method; java.lang.reflect.Constructor
	String getName()													возвращает имя метода, переменной или класса
	String getData()													возвращает данные об этом элементе
	Object getValue()													возвращает значение элемента. Для переменной - её значение; Для метода - класс, который он возвращает; Для класса - его имя; Или сам объект элемента
	boolean isBelong(Class<?> clazz)										возвращает принадлежность элемента к указанному классу
	Class<?> getParent()												возвращает класс, в котором находится текущий элемент
	boolean setValue(Object value)										только для элемента-переменная, пытается установить значение "value" для этой переменной
	Object invoke(Object[] values)										только для элемента-метод, пытается вызвать это метода, передавая значения "values"
