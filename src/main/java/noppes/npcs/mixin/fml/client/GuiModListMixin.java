package noppes.npcs.mixin.fml.client;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.renderer.texture.DynamicTexture;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.renderer.texture.TextureUtil;
import net.minecraft.client.resources.IResourcePack;
import net.minecraft.util.text.TextComponentTranslation;
import net.minecraft.util.text.TextFormatting;
import net.minecraftforge.common.ForgeVersion;
import net.minecraftforge.fml.client.FMLClientHandler;
import net.minecraftforge.fml.client.GuiModList;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fml.client.GuiScrollingList;
import net.minecraftforge.fml.client.IModGuiFactory;
import net.minecraftforge.fml.common.Loader;
import net.minecraftforge.fml.common.ModContainer;
import net.minecraftforge.fml.common.versioning.ComparableVersion;
import noppes.npcs.CustomNpcs;
import noppes.npcs.LogWriter;
import noppes.npcs.util.Util;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static net.minecraft.util.text.TextFormatting.RED;
import static net.minecraft.util.text.TextFormatting.WHITE;

@Mixin(value = GuiModList.class, remap = false)
public class GuiModListMixin {

    @Shadow
    private GuiButton configModButton;
    @Shadow
    private GuiButton disableModButton;
    @Shadow
    private GuiScrollingList modInfo;
    @Shadow
    private ModContainer selectedMod;
    @Shadow
    private int listWidth;

    @Unique
    private Constructor<?> npsc$infoConstructor;

    @Inject(method = "updateCache", at = @At("HEAD"), cancellable = true)
    public void npcs$updateCache(CallbackInfo ci) {
        try {
            Minecraft mc = Minecraft.getMinecraft();
            configModButton.visible = false;
            disableModButton.visible = false;
            modInfo = null;
            if (selectedMod == null) { return; }

            ResourceLocation logoPath = null;
            Dimension logoDims = new Dimension(0, 0);
            List<String> lines = new ArrayList<>();
            ForgeVersion.CheckResult verCheck = ForgeVersion.getResult(selectedMod);

            String logoFile = selectedMod.getMetadata().logoFile;
            if (!logoFile.isEmpty()) {
                TextureManager tm = mc.getTextureManager();
                IResourcePack pack = FMLClientHandler.instance().getResourcePackFor(selectedMod.getModId());
                try {
                    BufferedImage logo = null;
                    if (pack != null) { logo = pack.getPackImage(); }
                    else {
                        InputStream logoResource = getClass().getResourceAsStream(logoFile);
                        if (logoResource != null)
                            logo = TextureUtil.readBufferedImage(logoResource);
                    }
                    if (logo != null) {
                        logoPath = tm.getDynamicTextureLocation("modlogo", new DynamicTexture(logo));
                        logoDims = new Dimension(logo.getWidth(), logo.getHeight());
                    }
                }
                catch (IOException ignored) { }
            }

            String updateLineText = new TextComponentTranslation("forge.mod.update.available").getFormattedText() + TextFormatting.DARK_AQUA + (verCheck.url == null ? "" : verCheck.url);

            if (!selectedMod.getMetadata().autogenerated) {
                disableModButton.visible = true;
                disableModButton.enabled = true;
                disableModButton.packedFGColour = 0;
                ModContainer.Disableable disableable = selectedMod.canBeDisabled();
                if (disableable == ModContainer.Disableable.RESTART) { disableModButton.packedFGColour = new Color(0xFF3377).getRGB(); }
                else if (disableable != ModContainer.Disableable.YES)  { disableModButton.enabled = false; }

                IModGuiFactory guiFactory = FMLClientHandler.instance().getGuiFactoryFor(selectedMod);
                configModButton.visible = true;
                configModButton.enabled = false;
                if (guiFactory != null) { configModButton.enabled = guiFactory.hasConfigGui(); }
                if (selectedMod.getMetadata().modId.equals(CustomNpcs.MODID)) { lines.add(TextFormatting.GOLD + "Custom NPCs" + TextFormatting.DARK_GREEN + " Unofficial"); }
                else { lines.add(selectedMod.getMetadata().name); }
                lines.add(new TextComponentTranslation("forge.mod.version").getFormattedText() + " " + selectedMod.getDisplayVersion() + " (" + selectedMod.getVersion() + ")");
                lines.add(TextFormatting.GRAY + "Mod ID: " + TextFormatting.BLUE + selectedMod.getModId());
                lines.add(TextFormatting.GRAY + "Mod State: " + TextFormatting.GOLD + Loader.instance().getModState(selectedMod).toString());

                if (!selectedMod.getMetadata().credits.isEmpty()) { lines.add(new TextComponentTranslation("forge.mod.credits").getFormattedText() + " " + TextFormatting.AQUA + selectedMod.getMetadata().credits); }

                StringBuilder authors = new StringBuilder();
                int i = 0;
                for (String name : selectedMod.getMetadata().authorList) {
                    authors.append(TextFormatting.GREEN).append(name);
                    if (i < selectedMod.getMetadata().authorList.size() - 1) { authors.append(TextFormatting.GRAY).append(", "); }
                    i++;
                }
                lines.add(new TextComponentTranslation("forge.mod.authors").getFormattedText() + " " + authors);
                lines.add(TextFormatting.GRAY + "URL: " + selectedMod.getMetadata().url);

                if (selectedMod.getMetadata().childMods.isEmpty()) { lines.add(new TextComponentTranslation("forge.mod.no.child").getFormattedText()); }
                else { lines.add(new TextComponentTranslation("forge.mod.child").getFormattedText() + " " + selectedMod.getMetadata().getChildModList()); }

                if (verCheck.status == ForgeVersion.Status.OUTDATED || verCheck.status == ForgeVersion.Status.BETA_OUTDATED)  { lines.add(updateLineText); }

                lines.add(null);
                String description = new TextComponentTranslation(selectedMod.getMetadata().description).getFormattedText();
                if (Util.instance.equalsDeleteColor(description, selectedMod.getMetadata().description, false)) {
                    String currentLanguage = mc.getLanguageManager().getCurrentLanguage().getLanguageCode();
                    if (!currentLanguage.equals("en_us")) {
                        String language = currentLanguage;
                        if (currentLanguage.contains("_")) {
                            if (currentLanguage.equals("zh_cn")) { language = "zh_CN"; }
                            else if (currentLanguage.equals("zh_tw")) { language = "zh_TW"; }
                            else { language = currentLanguage.substring(0, currentLanguage.indexOf("_")); }
                        }
                        description = Util.instance.translateGoogle("auto", language, description);
                    }
                }
                lines.add(description);
            }
            else {
                lines.add(TextFormatting.WHITE + selectedMod.getName());
                lines.add(new TextComponentTranslation("forge.mod.version").getFormattedText() + " " + selectedMod.getVersion());
                lines.add(TextFormatting.GRAY + "Mod State: " + TextFormatting.GOLD + Loader.instance().getModState(selectedMod));
                if (verCheck.status == ForgeVersion.Status.OUTDATED || verCheck.status == ForgeVersion.Status.BETA_OUTDATED) { lines.add(updateLineText); }
                lines.add(null);
                lines.add(new TextComponentTranslation("forge.mod.no.found").getFormattedText());
                lines.add(new TextComponentTranslation("forge.mod.ask.author").getFormattedText());
            }

            if ((verCheck.status == ForgeVersion.Status.OUTDATED || verCheck.status == ForgeVersion.Status.BETA_OUTDATED) && !verCheck.changes.isEmpty()) {
                lines.add(null);
                lines.add(new TextComponentTranslation("forge.mod.changes").getFormattedText());
                for (Map.Entry<ComparableVersion, String> entry : verCheck.changes.entrySet()) {
                    lines.add("  " + entry.getKey() + ":");
                    lines.add(new TextComponentTranslation(entry.getValue()).getFormattedText());
                    lines.add(null);
                }
            }

            if (npsc$infoConstructor == null) {
                for (Class<?> subclass : GuiModList.class.getDeclaredClasses()) {
                    if (subclass.getSimpleName().equals("Info")) {
                        npsc$infoConstructor = subclass.getConstructor(GuiModList.class, int.class, List.class, ResourceLocation.class, Dimension.class);
                        break;
                    }
                }
            }
            if (npsc$infoConstructor != null) {
                GuiModList parent = (GuiModList) (Object) this;
                modInfo = (GuiScrollingList) npsc$infoConstructor.newInstance(parent, parent.width - listWidth - 30, lines, logoPath, logoDims);
                ci.cancel();
            }
        } catch (Exception e) {
            LogWriter.error(e);
        }
    }

}
